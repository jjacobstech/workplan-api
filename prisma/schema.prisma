generator client {
  provider = "prisma-client-js"
  output   = "../database/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int         @id @default(autoincrement()) @unique
  employee_id         String      @unique
  ministry_id         Int?
  department_id       Int?
  unit_id             Int?
  password            String
  role                String?
  created_at          DateTime    @default(now())
  updated_at          DateTime    @updatedAt
  head_of_department  Boolean     @default(false)
  head_of_service     Boolean     @default(false)
  head_of_unit        Boolean     @default(false)
  permanent_secretary Boolean     @default(false)
  staff               Boolean     @default(false)
  avatar              String?
  plans               Plan[]
  session             Session[]
  department          Department? @relation(fields: [department_id], references: [id])
  ministry            Ministry?   @relation(fields: [ministry_id], references: [id])
  unit                Unit?       @relation(fields: [unit_id], references: [id])
}

model Plan {
  id          Int      @id @default(autoincrement()) @unique
  user_id     Int
  month       Month
  month_order Int
  week        Week
  week_order  Int
  approved    Boolean  @default(false)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  user        User     @relation(fields: [user_id], references: [id])
  task        Task[]

  @@index([id, approved])
  @@index([user_id])
  @@index([month_order])
  @@index([week_order])
}

model Task {
  id          Int        @id @default(autoincrement()) @unique
  plan_id     Int
  day         Day
  day_order   Int
  title       String
  notes       String
  tools       String?
  priority    Priority
  time        String
  status      Status
  constraints String?
  completed   Completed?
  reason      String?
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt
  date        String
  plan        Plan       @relation(fields: [plan_id], references: [id])

  @@index([plan_id])
  @@index([day_order])
}

model Ministry {
  id          Int          @id @unique @default(autoincrement())
  name        String       @unique
  description String?
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
  department  Department[]
  unit        Unit[]
  user        User[]
}

model Department {
  id          Int      @id @unique @default(autoincrement())
  name        String
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  ministry_id Int
  ministry    Ministry @relation(fields: [ministry_id], references: [id])
  unit        Unit[]
  user        User[]

  @@unique([name, ministry_id])
}

model Unit {
  id            Int        @id @unique @default(autoincrement())
  name          String
  description   String?
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt
  department_id Int
  ministry_id   Int
  department    Department @relation(fields: [department_id], references: [id])
  ministry      Ministry   @relation(fields: [ministry_id], references: [id])
  user          User[]

  @@unique([name, department_id, ministry_id])
}

model Session {
  id            Int      @id @default(autoincrement()) @unique
  session_id    String   @unique
  user_id       Int
  token         String   @unique
  ip_address    String
  user_agent    String
  last_activity DateTime
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  user          User     @relation(fields: [user_id], references: [id])

  @@index([user_id])
  @@index([token])
  @@index([user_agent])
  @@index([ip_address])
}

enum Status {
  PENDING
  COMPLETED
  IN_PROGRESS
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}

enum Month {
  JANUARY
  FEBRUARY
  MARCH
  APRIL
  MAY
  JUNE
  JULY
  AUGUST
  SEPTEMBER
  OCTOBER
  NOVEMBER
  DECEMBER
}

enum Week {
  WEEK_1
  WEEK_2
  WEEK_3
  WEEK_4
  WEEK_5
}

enum Priority {
  HIGH
  MEDIUM
  LOW
}

enum Completed {
  YES
  NO
}
